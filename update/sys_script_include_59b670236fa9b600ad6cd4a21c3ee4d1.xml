<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_casus_laptop.CheckoutFormUtils</api_name>
        <client_callable>true</client_callable>
        <description>Functions used in the Laptop Checkoput Table Form. Used to verify that all form information is valid before submission.</description>
        <name>CheckoutFormUtils</name>
        <script><![CDATA[var CheckoutFormUtils = Class.create();
CheckoutFormUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	//Verifies that the device is available, creates a default return time, and returns the device's associated depot
	getDeviceFormInfo: function(){
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var availTag = this.newItem("availTag");
		if(device.state == 3){
			availTag.setAttribute("available", "true");
		}else{
			availTag.setAttribute("available", "false");
			return;
		}
		
		var depotTag = this.newItem("depotTag");
		depotTag.setAttribute("depot", device.depot);
		
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_chkTime'));
		var returnTime = new GlideDateTime(checkoutTime);
		
		returnTime.addSeconds(device.device_type.default_time.dateNumericValue() / 1000);
		
		var returnTag = this.newItem("returnTag");
		
		/*
 		* This code section is for the alternate scheduling method
		
		var inSched = this._altIsInSchedule(checkoutTime, returnTime);
		
		if(inSched == 1){
			returnTag.setAttribute("returnTime", returnTime);
		}else{
			returnTag.setAttribute("returnTime", inSched);
		}
 		*/
		returnTag.setAttribute("returnTime", 
							   this._isInSchedule(device.depot.schedule, checkoutTime, returnTime, false));
	},
	
	//This is a test function to explore other scheduling options (currently unused)
	_altIsInSchedule: function(checkoutTime, returnTime){
		var sCheckoutTime = new GlideDateTime(checkoutTime);
		sCheckoutTime.add(-checkoutTime.getTZOffset());
		
		var sched = new GlideSchedule('0b7986d40f58cb4012e4348ce1050e0f');
		
		if(sched.isInSchedule(sCheckoutTime)){
			var sReturnTime = new GlideDateTime(returnTime);
			sReturnTime.add(-returnTime.getTZOffset());
			if(sched.isInSchedule(sReturnTime)){
				return 1;
			}else{
				return 0;
			}
		}else{
			gs.addErrorMessage("Checkouts are unavailable at this time.");
			return -1;
		}
	},
	
	//This is a test function to explore ohter scheduling options (currently unused)
	altCheckWithSchedule: function(){
		//var device = new GlideRecord();
		//device.get(this.getParameter('sysparm_device'));
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_checkoutTime'));
		var returnTime = new GlideDateTime(this.getParameter('sysparm_returnTime'));
		
		/*
 		* TODO: Finish checks for duration longer than default and clear based on technician role
		
		var defaultReturnTime = new GlideDateTime(checkoutTime);
		deafultReturnTime.addSeconds(device.device_type.default_time.dateNumericValue() / 1000);
 		*/
		
		var inSchedTag = this.newItem("inSchedTag");
		inSchedTag.setAttribute("inSched", this._altIsInSchedule(checkoutTime, returnTime));
	},
	
	//current scheduling function
	_isInSchedule: function(schedID, checkoutTime, returnTime, isManager){
		var sCheckoutTime = new GlideDateTime(checkoutTime);
		var sReturnTime = new GlideDateTime(returnTime);
		
		sCheckoutTime.add(-checkoutTime.getTZOffset());
		sReturnTime.add(-returnTime.getTZOffset());
		
		var sched = new GlideSchedule(schedID);
		if(sched.isValid()){
			if(sched.isInSchedule(sCheckoutTime)){
				if(sched.isInSchedule(sReturnTime)){
					return returnTime;
				}else{
					if(isManager){
						gs.addErrorMessage("Warning: Return Time is outside operation hours.");
						return returnTime;
					}else{
						gs.addInfoMessage("Return Time was outside operation hours and was trimmed " + 
										  "to the nearest valid time.");
						var duration = sched.duration(sCheckoutTime, sReturnTime);
						var trimmedReturn = sched.add(sCheckoutTime, duration);
						trimmedReturn.add(checkoutTime.getTZOffset());
						return trimmedReturn;
					}
				}
			}else{
				gs.addErrorMessage("Checkouts are unavailable at this time.");
				if(isManager){
					return returnTime;
				}else{
					return '';
				}
			}
		}
	},
	
	renewWithSchedule: function(){
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_checkoutTime'));
		var returnTime = new GlideDateTime(this.getParameter('sysparm_returnTime'));
		var renewalCount = this.getParameter('sysparm_renewalCount');
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var isAdmin = gs.hasRole('x_casus_laptop.admin');
	
		var isUnderRenewalLimit = renewalCount < device.device_type.max_renewal;
		
		var renewedTag = this.newItem("renewedTag");
		var renewed = false;
		
		if (isAdmin || isUnderRenewalLimit){
			var now = new GlideDateTime();
			var return_time = new GlideDateTime(returnTime);
		
			var isBeforeReturnTime = now.compareTo(return_time) != -1;
		
			if (isAdmin || isBeforeReturnTime){
				var newReturnTime = new GlideDateTime();
				var default_time = new GlideDateTime(device.device_type.default_time);
		
				newReturnTime.add(default_time.getNumericValue());
				
				now.add(now.getTZOffset());
				newReturnTime.add(newReturnTime.getTZOffset());
				
				newReturnTime.setValue(this._isInSchedule(device.depot.schedule, 
														  now, newReturnTime, isAdmin));
				
				if(newReturnTime != ''){
					var returnTag = this.newItem("returnTag");
					returnTag.setAttribute("returnTime", newReturnTime);
					renewed = true;
					
					gs.addInfoMessage(device.device_type.device_type + " " + device.device_id + 
									  " Renewed Until " + newReturnTime.getDisplayValue());
				}
			}else{
				gs.addErrorMessage('Renewal is not allowed past return time.');
			}
		}else{
			gs.addErrorMessage("Device has reached max renewal count.");
		}
		renewedTag.setAttribute("renewed", renewed);
	},
	
	//current function receiving arguments from the Return Time Check Client Script
	checkWithSchedule: function(){
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_checkoutTime'));
		var returnTime = new GlideDateTime(this.getParameter('sysparm_returnTime'));
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var isManager = gs.hasRole('x_casus_laptop.admin') ||
		gs.hasRole('x_casus_laptop.airc_manager') ||
		gs.hasRole('x_casus_laptop.asi_manager') ||
		gs.hasRole('x_casus_laptop.library_manager');
		
		var inSchedTag = this.newItem("inSchedTag");
		inSchedTag.setAttribute("inSched", 
								this._isInSchedule(device.depot.schedule, 
												   checkoutTime, returnTime, isManager));
	},
	
	//Verifies that the User is a student and has no holds
	checkStudent: function(){
		var student = new GlideRecord('sys_user');
		student.get(this.getParameter('sysparm_student'));
		
		//Put User's student status into XML
		var studentTag = this.newItem("studentTag");
		studentTag.setAttribute("isStudent", student.u_student);
		
		//Put User's faculty status into XML
		var facultyTag = this.newItem("facultyTag");
		facultyTag.setAttribute("isFaculty", student.u_faculty);
		
		//Put User's staff status into XML
		var staffTag = this.newItem("staffTag");
		staffTag.setAttribute("isStaff", student.u_staff);
		
		//Check if User has holds
		var holds = new GlideRecord('x_casus_laptop_hold');
		holds.addActiveQuery();
		holds.query();
		
		var hasHold = "false";
		while(holds.hasNext()){
			holds.next();
			if(student.sys_id == holds.checkout_ticket.student_name.sys_id){
				hasHold = "true";
			}
		}
		//Put boolean in XML based on how many holds the User has
		var holdTag = this.newItem("holdTag");
		holdTag.setAttribute("hasHold", hasHold);
	},
	
	//Returns curernt time: used for list filtering
	getNowDateTime: function(){
		var now = gs.minutesAgoStart(0);
		return now;
	},
	
	type: 'CheckoutFormUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>hedge</sys_created_by>
        <sys_created_on>2017-03-22 21:08:10</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>59b670236fa9b600ad6cd4a21c3ee4d1</sys_id>
        <sys_mod_count>174</sys_mod_count>
        <sys_name>CheckoutFormUtils</sys_name>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_script_include_59b670236fa9b600ad6cd4a21c3ee4d1</sys_update_name>
        <sys_updated_by>hedge</sys_updated_by>
        <sys_updated_on>2017-08-16 22:40:20</sys_updated_on>
    </sys_script_include>
</record_update>
