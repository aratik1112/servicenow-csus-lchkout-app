<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_casus_laptop_roled_user</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Deprovision Laptop Technician with Role</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	//BR runs on the Roled User table within the laptop checkout app, and allows scoped 'admins' to provision users with roles specific to the application without requiring sys admin intervention/access, allowing scoped governance.
	
	//pull the sys_id of the role using its name
	var roleRef = new GlideRecord('sys_user_role');
	roleRef.addQuery('name', current.role);
	roleRef.query();
	roleRef.next();
	
	var usr = new GlideRecord('sys_user_has_role');
	usr.addQuery('user', current.technician);
	usr.addQuery('role', roleRef.sys_id);
	usr.query();
	
	if(usr.next()) {
		
		usr.deleteRecord();
		gs.addInfoMessage(current.role.getDisplayValue() + " role removed from " + current.technician.getDisplayValue() + "'s profile.");		
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-07-06 15:30:21</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>1128e9e96f3fb240ad6cd4a21c3ee441</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Deprovision Laptop Technician with Role</sys_name>
        <sys_overrides/>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_script_1128e9e96f3fb240ad6cd4a21c3ee441</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-07-06 17:24:20</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
</record_update>
