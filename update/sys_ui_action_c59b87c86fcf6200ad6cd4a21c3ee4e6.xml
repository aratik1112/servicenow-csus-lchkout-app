<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>Confirm</action_name>
        <active>true</active>
        <client>false</client>
        <comments>Moves the Checkout Ticket from the "Confriming" state to the "Checked Out" state if certain conditions are met. &#13;
Checks two conditions: &#13;
 1) if the Device is in the "Available" state &#13;
 2) if the customer has mutiple devices of the same type checked out (overidden by Manager roles)</comments>
        <condition>current.state=='Confirming'</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <hint/>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <name>Confirm</name>
        <onclick>runclientcode()</onclick>
        <order>100</order>
        <script><![CDATA[var hasMultipleDevices = checkForMultipleDevices(current.student_name);

var isManager = gs.hasRole('x_casus_laptop.admin') || 
	gs.hasRole('x_casus_laptop.airc_manager') || 
	gs.hasRole('x_casus_laptop.asi_manager') || 
	gs.hasRole('x_casus_laptop.library_manager');

if (hasMultipleDevices) {
	if (isManager) {
		gs.addErrorMessage("Student already has the same device type checked out");
		checkoutDevice();
	} else {
		gs.addErrorMessage("Checkout Denied: Student already has the same device type checked out");
		action.setRedirectURL(current);
	}
} else { //No checkout conflicts, proceed to checkout the item
	checkoutDevice();
}


function checkoutDevice() {
    if (current.device_name.state == 3) {
        //Find Device from Ticket and change availability
        var device = new GlideRecord('x_casus_laptop_devices_table');
        device.get(current.device_name);
        device.state = 2;
        device.update();

        //Change ticket state and remind operator of Return Time
        current.state = 'Checked Out';
        current.update();
        gs.addInfoMessage(current.device_name.device_id + " return time: " + current.return_time.getDisplayValue());
    } else {
        gs.addErrorMessage("Device is currently unavailable.");
        action.setRedirectURL(current);
    }

}
/*_________________________________________________________________
   * Description: Checks if the customer has multiple devices of the same type
   * Parameters: user id of customer
   * Returns: (boolean) True - Yes, they already have a same type device checked out
   ________________________________________________________________*/
function checkForMultipleDevices(student_sys_id) {
	// Find other checkout records for the student
	var checkoutRecord = new GlideRecord('x_casus_laptop_checkout_table');
	checkoutRecord.addQuery('state', 'Checked Out');
	checkoutRecord.addQuery('student_name', student_sys_id);
	checkoutRecord.query();
	// Check each to see if the records are for the same type of device
	while (checkoutRecord.next()) {
		var otherRecordType = checkoutRecord.device_name.device_type.device_type;
		var currentType = current.device_name.device_type.getDisplayValue();
		
		if (otherRecordType.toString() === currentType.toString()) {
			gs.addInfoMessage(checkoutRecord.number);
			return true; // Found a match, stop searching
		}
	}
	return false;
}
]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>msn73</sys_created_by>
        <sys_created_on>2016-11-08 03:49:48</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>c59b87c86fcf6200ad6cd4a21c3ee4e6</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>Confirm</sys_name>
        <sys_overrides/>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_ui_action_c59b87c86fcf6200ad6cd4a21c3ee4e6</sys_update_name>
        <sys_updated_by>hedge</sys_updated_by>
        <sys_updated_on>2017-08-16 17:00:58</sys_updated_on>
        <table>x_casus_laptop_checkout_table</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
</record_update>
