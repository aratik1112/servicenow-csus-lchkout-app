<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_casus_laptop_invoice</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_casus_laptop_invoice">holdISNOTEMPTY^state=1^EQ<item endquery="false" field="hold" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="1"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Generate DAT Invoice File</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	//generate an ECC Queue event and process the data into an XML payload. Parses the data into an attachment and attaches it to the record for further processing
	
	
	//functions to encode the data into base64 to ensure data is interpreted the same way everywhere it's used
	//encoding information and formatting info provided by Matt Saxton at https://community.servicenow.com/thread/169936
	var Base64 = {
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		input = Base64._utf8_encode(input);

		while (i < input.length) {

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}

			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
		}
		return output;
	},

	
	// public method for decoding
	decode : function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		output = Base64._utf8_decode(output);

		return output;

	},


	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	},

	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
		
			while ( i < utftext.length ) {
				c = utftext.charCodeAt(i);

				if (c < 128) {
					string += String.fromCharCode(c);
					i++;
				} else if((c > 191) && (c < 224)) {
					c2 = utftext.charCodeAt(i+1);
					i += 2;
				} else {
					c2 = utftext.charCodeAt(i+1);
					c3 = utftext.charCodeAt(i+2);
					string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
					i += 3;
				}
			}
			return string;
		}
	};
	
	generateLaptopInvoiceDatFile();
	
	//generate the invoice dat file to send to the bursar's office
	function generateLaptopInvoiceDatFile() {
		gs.addInfoMessage("Generating Dat File");
		var datFile = new GlideRecord('ecc_queue');
		datFile.initialize();
		datFile.agent = 'AttachmentCreator';
		datFile.topic = 'CheckoutInvoiceDatFileCreator';

		// name and filetype creation, invoice name resemble CHKINV0000001
		datFile.name = + "CHK" + current.number + '.dat:application/otctet-stream';

		datFile.source = current.getTableName() + ':' + current.sys_id;

		//file content is structured: Campus_ID[9] fee_Amt[7] Item_Type[12] Reference_Number[6] Due_Date[8] Effective_Date[8] Term[4]
		//fee display value is 4 digits before the decimal, two after. Concatenate to display properly
		var formattedFee = current.fee.getValue();
		if(formattedFee < 10) 
			formattedFee = "000" + formattedFee;
		else if(formattedFee < 100)
			formattedFee = "00" + formattedFee;
		else if(formattedFee < 1000)
			formattedFee = "0" + formattedFee;
		
		//remove characters from the invoice number, and achieve 6 chars
		var formattedInvNum = current.number.replace("INV0", '');
		
		//currently no defined due date exists, so set to the current date, as they've had the laptop too long
		/*var dueDate;
		var formattedDueDate;*/
		
		var billingDate = current.sys_created_on.getDate();
		var formattedBillingDate = billingDate.getMonthLocalTime() + billingDate.getDayLocalTime() + billingDate.getYearLocalTime();
		
		var formattedTerm = "1234"; //just gibberish for now, not sure how to define term.
		
		datFile.payload = current.hold.checkout_ticket.student_name.employee_number + " " + formattedFee + "000000000000" + formattedInvNum
			+ formattedBillingDate + formattedBillingDate + formattedTerm;
		
		datFile.insert();
		gs.addInfoMessage("Inserted to ecc_queue");

		attachDatFileToRecord(datFile);
		//emailDatFile(datFile);
	}

	//attach this dat file to the record
	function attachDatFileToRecord(file) {
		gs.addInfoMessage("Attaching Dat File");

		var dAttachment = new GlideRecord('sys_attachment');
		dAttachment.initialize();
		dAttachment.table_name = current.getTableName();
		dAttachment.file_name = file.name;
		dAttachment.table_sys_id = current.getValue('sys_id');
		dAttachment.size_bytes = file.payload.toString().length; //with utf-8, each ascii char is only 1 byte, so we can lie and say it's the length, as generally it will be
		dAttachment.content_type = "application/otctet-stream";
		dAttachment.insert();
		
		var attDoc = new GlideRecord('sys_attachment_doc');
		attDoc.initialize();
		attDoc.data = file.payload;
		attDoc.sys_attachment = dAttachment.sys_id;
		attDoc.length = file.payload.toString().length; 
		attDoc.position = 0;
		attDoc.insert();
		
		//attach to record for reference
	}

	//generate an email / send a notification to the bursar's office with this data
	function emailDatFile(file) {

	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-07-28 20:13:48</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>255d332c0fd00f4012e4348ce1050eb6</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>Generate DAT Invoice File</sys_name>
        <sys_overrides/>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_script_255d332c0fd00f4012e4348ce1050eb6</sys_update_name>
        <sys_updated_by>gg622</sys_updated_by>
        <sys_updated_on>2017-08-02 22:07:34</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
